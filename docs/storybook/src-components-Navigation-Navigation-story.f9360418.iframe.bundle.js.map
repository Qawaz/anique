{"version":3,"file":"src-components-Navigation-Navigation-story.f9360418.iframe.bundle.js","mappings":";;AA4DA;AAdA;AACA;;;AAGA;AACA;AACA;;;AAPA;AA2BA;;;;AAMA","sources":["webpack://anique/./src/lib/src/components/Link/Link.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport React, {\r\n    FC,\r\n    ReactElement,\r\n    ReactNode,\r\n    forwardRef,\r\n    ForwardedRef,\r\n    ComponentType,\r\n    AnchorHTMLAttributes,\r\n    PropsWithChildren,\r\n    HTMLAttributeAnchorTarget,\r\n    HTMLAttributeReferrerPolicy\r\n} from 'react';\r\n\r\nimport {Icon} from '../Icon';\r\nimport {ExternalSmallMinor} from \"../../icons\";\r\nimport {css, Theme} from \"@emotion/react\";\r\nimport {Color} from \"../../types/theme\";\r\n\r\nexport interface LinkProps {\r\n    url: string;\r\n    children?: ReactNode;\r\n    external?: boolean;\r\n    monochrome?: boolean;\r\n    download?: string | boolean;\r\n    unstyled?: boolean;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst UnstyledAnchorTag = styled.a(\r\n    ({theme: {color}}) => `\r\n    text-decoration: none;\r\n    color: ${color.textPrimary};\r\n  `\r\n);\r\n\r\ninterface AnchorProps extends PropsWithChildren {\r\n\r\n    underlined?: boolean\r\n    colored?: boolean\r\n    underlineOnHover?: boolean\r\n\r\n}\r\n\r\nconst AnchorStyles = (color: Color, colored: boolean, underlined: boolean, underlineOnHover: boolean) => css`\r\n  color: ${colored ? color.linkPrimary : color.textPrimary};\r\n  text-decoration: ${underlined ? 'underline' : 'none'};\r\n\r\n  &:hover {\r\n    text-decoration: ${underlineOnHover ? \"underline\" : \"none\"};\r\n    ${(colored) && css`\r\n      color: ${color.linkPrimaryHovered};\r\n    `}\r\n  }\r\n`\r\n\r\nexport const Anchor = styled(\"a\",{\r\n    shouldForwardProp : (name) => name != \"colored\" && name != \"underlined\" && name != \"underlineOnHover\"\r\n})<AnchorProps>`\r\n  ${props => AnchorStyles(props.theme.color, props.colored ?? true, props.underlined ?? true, props.underlineOnHover ?? true)}\r\n`\r\n\r\ninterface ExternalAnchorProps extends AnchorProps {\r\n    className?: string\r\n    id?: string\r\n    href?: string\r\n    target?: HTMLAttributeAnchorTarget\r\n    referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\r\n    download?: any;\r\n}\r\n\r\nconst ExternalAnchorTag = styled(Anchor)<ExternalAnchorProps>`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`\r\n\r\nexport function ExternalAnchor(props: ExternalAnchorProps) {\r\n    return (\r\n        <span className={props.className} id={props.id}>\r\n            <ExternalAnchorTag\r\n                underlined={props.underlined}\r\n                colored={props.colored}\r\n                underlineOnHover={props.underlineOnHover}\r\n                href={props.href}\r\n                target={props.target ?? \"_blank\"}\r\n                referrerPolicy={props.referrerPolicy}\r\n                download={props.download}\r\n            >\r\n                <span>{props.children}</span>\r\n                <Icon\r\n                    source={ExternalSmallMinor}\r\n                    size=\"large\"\r\n                    color={'linkPrimary'}\r\n                />\r\n            </ExternalAnchorTag>\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const UnstyledLink: FC<LinkProps> = forwardRef(\r\n    (props, ref: ForwardedRef<HTMLAnchorElement>): ReactElement => {\r\n        const {external, url, children, unstyled, ...rest} = props;\r\n        const target = external ? '_blank' : undefined;\r\n        const rel = external ? 'noopener noreferrer' : undefined;\r\n        return (\r\n            <span className=\"Anique-LinkElement\">\r\n        <UnstyledAnchorTag\r\n            className={`Anique-AnchorTag`}\r\n            ref={ref}\r\n            target={target}\r\n            href={url}\r\n            rel={rel}\r\n            data-testid=\"link\"\r\n            {...rest}\r\n        >\r\n          <span className=\"Anique-LinkText\">{children}</span>\r\n            {external && !unstyled && typeof children === 'string' && (\r\n                <span className=\"Anique-LinkExternalIcon\">\r\n              <Icon\r\n                  source={ExternalSmallMinor}\r\n                  size=\"large\"\r\n                  color={'linkPrimary'}\r\n              />\r\n            </span>\r\n            )}\r\n        </UnstyledAnchorTag>\r\n      </span>\r\n        );\r\n    }\r\n);\r\n\r\nexport const Link = styled(UnstyledLink)(\r\n    ({theme: {color}, monochrome, unstyled}) => `\r\n        display: inline-flex;\r\n        align-items: center;\r\n        gap: 5px;\r\n        color: ${\r\n        monochrome || unstyled\r\n            ? color.textPrimary\r\n            : color.linkPrimary\r\n    };\r\n        text-decoration: ${unstyled ? 'none' : 'underline'};\r\n        transition-property: color;\r\n        transition-duration: 3s;\r\n        transition-timing-function: ease-in-out;\r\n        &:hover {\r\n            color: ${\r\n        monochrome || unstyled\r\n            ? color.textPrimary\r\n            : color.linkPrimaryHovered\r\n    };\r\n        }        \r\n    `\r\n);\r\n"],"names":[],"sourceRoot":""}