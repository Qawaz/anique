{"version":3,"file":"src-components-Invisible-Invisible-story.ef6c3cb0.iframe.bundle.js","mappings":";;;;AAgBA;ACoBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;AC5BA","sources":["webpack://anique/./src/lib/src/components/FormLayout/FormLayout.tsx","webpack://anique/./src/lib/src/components/Heading/Heading.tsx","webpack://anique/./src/lib/src/components/Invisible/Invisible.tsx"],"sourcesContent":["import React, { ReactNode, Children, NamedExoticComponent, memo } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { Group, Item } from './components';\r\nimport { isElementOfType, wrapWithComponent } from '../../utilities';\r\n\r\nexport interface FormLayoutProps {\r\n  /** The elements in the Form Layout */\r\n  children: ReactNode;\r\n}\r\n\r\nconst StyledFormLayout = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.625rem;\r\n`;\r\n\r\nconst FormLayout = memo(({ children }) => {\r\n  return (\r\n    <StyledFormLayout className=\"Anique-FormLayout\">\r\n      {Children.map(children, (child, index) => {\r\n        if (isElementOfType(child, Group)) {\r\n          return child;\r\n        }\r\n        return wrapWithComponent(child, Item, { key: index });\r\n      })}\r\n    </StyledFormLayout>\r\n  );\r\n}) as NamedExoticComponent<FormLayoutProps> & { Group: typeof Group };\r\n\r\nFormLayout.Group = Group;\r\n\r\nexport { FormLayout };\r\n","import React, {ReactElement, ReactNode} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport {generateUniqueID} from '../../utilities';\r\n\r\ntype HeadingTagName = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\r\n\r\nexport interface HeadingProps {\r\n    /**\r\n     * The element name to use for the heading\r\n     * @default 'h2'\r\n     */\r\n    element?: HeadingTagName;\r\n    /** The content to display inside the heading */\r\n    children?: ReactNode;\r\n    /** A unique identifier for the heading, used for reference in anchor links  */\r\n    id?: string;\r\n    /** Heading className attribute */\r\n    className?: string;\r\n}\r\n\r\nconst UnstyledHeading = ({\r\n                             element: Element = 'h2',\r\n                             children,\r\n                             className,\r\n                             id\r\n                         }: HeadingProps): ReactElement => {\r\n    const _id = id || generateUniqueID('Anique-Heading');\r\n\r\n    return (\r\n        <Element id={_id} className={`Anique-Heading ${className || ''}`}>\r\n            {children}\r\n        </Element>\r\n    );\r\n};\r\n\r\nexport const H1 = styled.h1`\r\n  color: ${props => props.theme.color.textPrimary}\r\n`\r\nexport const H2 = styled.h2`\r\n  color: ${props => props.theme.color.textPrimary}\r\n`\r\nexport const H3 = styled.h3`\r\n  color: ${props => props.theme.color.textPrimary}\r\n`\r\nexport const H4 = styled.h4`\r\n  color: ${props => props.theme.color.textPrimary}\r\n`\r\nexport const H5 = styled.h5`\r\n  color: ${props => props.theme.color.textPrimary}\r\n`\r\nexport const H6 = styled.h6`\r\n  color: ${props => props.theme.color.textPrimary}\r\n`","import React, { ReactElement, ReactNode } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nexport interface InvisibleProps {\r\n  /** The content to be hidden visually */\r\n  children?: ReactNode;\r\n}\r\n\r\nconst StyledInvisible = styled.span`\r\n  visibility: hidden !important;\r\n  position: absolute !important;\r\n  top: 0 !important;\r\n  width: 1px !important;\r\n  height: 1px !important;\r\n  margin: 0 !important;\r\n  padding: 0 !important;\r\n  overflow: hidden !important;\r\n  border: 0 !important;\r\n  outline: 0 !important;\r\n  white-space: nowrap !important;\r\n  clip-path: inset(50%) !important;\r\n`;\r\n\r\nexport const Invisible = ({ children }: InvisibleProps): ReactElement => {\r\n  return (\r\n    <StyledInvisible className=\"Anique-Invisible\">{children}</StyledInvisible>\r\n  );\r\n};\r\n"],"names":[],"sourceRoot":""}