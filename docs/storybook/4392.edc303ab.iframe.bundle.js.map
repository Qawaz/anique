{"version":3,"file":"4392.edc303ab.iframe.bundle.js","mappings":";;AA8DA;;;;;;;;;;;;;ACvCA;;;;;;;;;;ACSA","sources":["webpack://anique/./src/lib/src/components/Button/Button.tsx","webpack://anique/./src/lib/src/components/Invisible/Invisible.tsx","webpack://anique/./src/lib/src/components/Spinner/Spinner.tsx"],"sourcesContent":["import React, {\r\n  ReactElement,\r\n  ReactNode,\r\n  useState,\r\n  useCallback,\r\n  useRef,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n  ChangeEvent,\r\n  createElement\r\n} from 'react';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nimport {\r\n  ActionListItem,\r\n  BaseButton,\r\n  IconSource,\r\n  UploadButtonProps\r\n} from '../../types';\r\nimport { Spinner } from '../Spinner';\r\nimport { useTestId, isIconSource } from '../../utilities';\r\nimport { Icon } from '../Icon';\r\nimport {\r\n  CaretUpMinor,\r\n  CaretDownMinor,\r\n  SelectMinor\r\n} from \"../../icons\";\r\nimport { Popover } from '../Popover';\r\nimport { ActionList } from '../ActionList';\r\nimport { Invisible } from '../Invisible';\r\n\r\nexport interface ConnectedDisclosure {\r\n  /** Visually hidden label for screen readers */\r\n  ariaLabel?: string;\r\n  /** Whether Connected Disclosure is disabled or not */\r\n  disabled?: boolean;\r\n  /** The actions available from the popover */\r\n  actions?: ActionListItem[];\r\n}\r\n\r\nexport interface ButtonProps extends BaseButton {\r\n  children?: string | ReactElement;\r\n  textAlign?: 'left' | 'center' | 'right';\r\n  size?: 'slim' | 'medium' | 'large';\r\n  fullWidth?: boolean;\r\n  primary?: boolean;\r\n  outline?: boolean;\r\n  plain?: boolean;\r\n  alert?: boolean;\r\n  icon?: ReactElement | IconSource;\r\n  iconOnly?: boolean;\r\n  disclosure?: 'down' | 'up' | 'select' | boolean;\r\n  upload?: boolean;\r\n  uploadOptions?: UploadButtonProps;\r\n  connectedDisclosure?: ConnectedDisclosure;\r\n}\r\n\r\nconst ButtonContainer = styled.div`\r\n  display: inline-flex;\r\n`\r\n\r\nconst AniqueButton = forwardRef<\r\n  HTMLButtonElement | HTMLInputElement,\r\n  ButtonProps\r\n>(\r\n  (\r\n    {\r\n      children,\r\n      id,\r\n      name,\r\n      className,\r\n      url,\r\n      disabled,\r\n      external,\r\n      download,\r\n      submit,\r\n      loading,\r\n      pressed,\r\n      role,\r\n      ariaLabel,\r\n      ariaControls,\r\n      ariaExpanded,\r\n      ariaDescribedBy,\r\n      ariaChecked,\r\n      ariaPressed,\r\n      onClick,\r\n      onFocus,\r\n      onBlur,\r\n      onKeyDown,\r\n      onKeyPress,\r\n      onKeyUp,\r\n      onMouseEnter,\r\n      onTouchStart,\r\n      onPointerDown,\r\n      icon,\r\n      iconOnly,\r\n      upload,\r\n      uploadOptions,\r\n      disclosure,\r\n      connectedDisclosure,\r\n      primary,\r\n      outline,\r\n      alert,\r\n      plain,\r\n      size = 'medium'\r\n    },\r\n    ref\r\n  ): ReactElement => {\r\n    /***************************************************************************************/\r\n    /** Declare variables, refs, state */\r\n    /***************************************************************************************/\r\n    const classes = `Anique-Button ${className ?? ''}`;\r\n\r\n    const [disclosureActive, setDisclosureActive] = useState(false);\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null); // For File Upload Button (input type: file)\r\n    const buttonRef = useRef<HTMLButtonElement>(null); // For other Buttons\r\n\r\n    useImperativeHandle(ref, () =>\r\n      upload\r\n        ? (inputRef.current as HTMLInputElement)\r\n        : (buttonRef.current as HTMLButtonElement)\r\n    );\r\n\r\n    /***************************************************************************************/\r\n    /** Handle Events */\r\n    /***************************************************************************************/\r\n\r\n    const toggleDisclosure = useCallback(\r\n      () => setDisclosureActive((prev) => !prev),\r\n      []\r\n    );\r\n\r\n    const handleUploadButton = useCallback(\r\n      (event: ChangeEvent<HTMLInputElement>) => {\r\n        event.preventDefault();\r\n        uploadOptions?.onChange?.(event);\r\n      },\r\n      [uploadOptions?.onChange]\r\n    );\r\n\r\n    /***************************************************************************************/\r\n    /** Categorize Props */\r\n    /***************************************************************************************/\r\n\r\n    const commonProps = {\r\n      id,\r\n      className: classes,\r\n      'aria-label': ariaLabel\r\n    };\r\n\r\n    const childMarkup =\r\n      typeof children === 'string' ? (\r\n        <span className=\"Anique-ButtonText\">{children}</span>\r\n      ) : (\r\n        children\r\n      );\r\n\r\n    const linkProps = {\r\n      target: external ? '_blank' : undefined,\r\n      rel: external ? 'noopener noreferrer' : undefined\r\n    };\r\n\r\n    const interactiveProps = {\r\n      ...commonProps,\r\n      role: role ?? 'button',\r\n      onClick: upload ? () => inputRef.current?.click() : onClick,\r\n      onFocus,\r\n      onBlur,\r\n      onMouseEnter,\r\n      onTouchStart\r\n    };\r\n\r\n    const accessibilityProps = {\r\n      'aria-busy': loading ? true : undefined,\r\n      'aria-controls': ariaControls,\r\n      'aria-expanded': ariaExpanded,\r\n      'aria-describedby': ariaDescribedBy,\r\n      'aria-checked': ariaChecked,\r\n      'aria-pressed': ariaPressed\r\n    };\r\n\r\n    /***************************************************************************************/\r\n    /** Content Markup */\r\n    /***************************************************************************************/\r\n    const iconSource = isIconSource(icon) ? (\r\n      <Icon source={loading ? 'placeholder' : icon} />\r\n    ) : (\r\n      icon\r\n    );\r\n\r\n    let iconMarkup: ReactNode;\r\n    if (iconSource) {\r\n      iconMarkup = iconOnly ? (\r\n        iconSource\r\n      ) : (\r\n        <span className=\"Anique-ButtonIcon\">\r\n          {iconSource} {childMarkup}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    const getDisclosureIconSource = (\r\n      disclosure: NonNullable<ButtonProps['disclosure']>\r\n    ) => {\r\n      switch (disclosure) {\r\n        case 'up':\r\n          return CaretUpMinor;\r\n        case 'select':\r\n          return SelectMinor;\r\n        default:\r\n          return CaretDownMinor;\r\n      }\r\n    };\r\n\r\n    /** Markup: Disclosure icon */\r\n    const disclosureMarkup = disclosure ? (\r\n      <Icon\r\n        className=\"Anique-ButtonDisclosure\"\r\n        source={loading ? 'placeholder' : getDisclosureIconSource(disclosure)}\r\n        size=\"large\"\r\n      />\r\n    ) : undefined;\r\n\r\n    /** Markup: Connected Disclosure  */\r\n    let connectedDisclosureMarkup: ReactNode;\r\n    if (connectedDisclosure) {\r\n      const { disabled, ariaLabel, actions } = connectedDisclosure;\r\n\r\n      /** Disclosure Trigger */\r\n      const connectedDisclosureTrigger = (\r\n        <button\r\n          type=\"button\"\r\n          className={`Anique-ConnectedDisclosure ${classes}`}\r\n          aria-disabled={disabled}\r\n          aria-label={ariaLabel ?? 'Button Actions'}\r\n          aria-describedBy={ariaDescribedBy}\r\n          aria-checked={ariaChecked}\r\n          onClick={toggleDisclosure}\r\n          tabIndex={disabled ? -1 : undefined}\r\n        >\r\n          <Icon source={CaretDownMinor} size=\"large\" />\r\n        </button>\r\n      );\r\n\r\n      connectedDisclosureMarkup = (\r\n        <Popover\r\n          active={disclosureActive}\r\n          trigger={connectedDisclosureTrigger}\r\n          onClose={toggleDisclosure}\r\n        >\r\n          <ActionList items={actions} onActionAnyItem={toggleDisclosure} />\r\n        </Popover>\r\n      );\r\n    }\r\n\r\n    const buttonContent = loading ? (\r\n      <Spinner color=\"white\" size=\"small\" />\r\n    ) : icon ? (\r\n      iconMarkup\r\n    ) : (\r\n      childMarkup\r\n    );\r\n\r\n    /** Enable Button as a Link */\r\n    let buttonMarkup: ReactElement;\r\n    if (url && !upload) {\r\n      buttonMarkup = (\r\n        <a\r\n          {...Object.assign(\r\n            linkProps,\r\n            disabled ? commonProps : { ...interactiveProps, href: url }\r\n          )}\r\n        >\r\n          {buttonContent}\r\n          {disclosureMarkup}\r\n        </a>\r\n      );\r\n    } else {\r\n      /** Generate Button without a Link */\r\n      buttonMarkup = (\r\n        <button\r\n          {...interactiveProps}\r\n          name={name}\r\n          type={submit ? 'submit' : 'button'}\r\n          ref={buttonRef}\r\n          tabIndex={0}\r\n          disabled={disabled}\r\n          onKeyDown={onKeyDown}\r\n          onKeyPress={onKeyPress}\r\n          onKeyUp={onKeyUp}\r\n          onPointerDown={onPointerDown}\r\n          {...accessibilityProps}\r\n        >\r\n          {buttonContent}\r\n          {disclosureMarkup}\r\n        </button>\r\n      );\r\n    }\r\n\r\n    const uploadMarkup = upload ? (\r\n      <Invisible>\r\n        <input\r\n          type=\"file\"\r\n          hidden\r\n          aria-hidden=\"true\"\r\n          tabIndex={-1}\r\n          ref={inputRef}\r\n          name={name}\r\n          onChange={handleUploadButton}\r\n          multiple={uploadOptions?.allowMultiple}\r\n          accept={uploadOptions?.accept}\r\n          {...useTestId('button-upload')}\r\n        />\r\n      </Invisible>\r\n    ) : undefined;\r\n\r\n    /***************************************************************************************/\r\n    /** Render the Button */\r\n    /***************************************************************************************/\r\n\r\n    return (\r\n      <ButtonContainer className=\"Anique-ButtonContainer\">\r\n        {buttonMarkup}\r\n        {connectedDisclosureMarkup}\r\n        {uploadMarkup}\r\n      </ButtonContainer>\r\n    );\r\n  }\r\n);\r\n\r\nexport const Button = styled(AniqueButton)(\r\n  ({\r\n    theme: { color, fontSize },\r\n    fullWidth,\r\n    iconOnly,\r\n    uppercase = false,\r\n    outline,\r\n    url,\r\n    primary,\r\n    loading,\r\n    alert,\r\n    disclosure,\r\n    disabled,\r\n    textAlign = 'center'\r\n  }) => {\r\n    const ButtonTextColor = `${\r\n      disabled\r\n        ? color.btnDisabled\r\n        : (primary || alert) && !outline\r\n        ? 'white'\r\n        : alert\r\n        ? color.btnAlert\r\n        : outline\r\n        ? alert\r\n          ? color.btnAlert\r\n          : color.btnPrimary\r\n        : color.textSecondary\r\n    };`;\r\n\r\n    return `\r\n  ${\r\n    (url || disclosure) &&\r\n    `\r\n  position: relative;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  `\r\n  };\r\n  width: ${fullWidth ? '100%' : 'auto'};\r\n  min-width: ${iconOnly ? 'auto' : '85px'};\r\n  padding: 0.875em 1.5em;\r\n  font-size: ${fontSize.fontSize3};\r\n  font-weight: bold;\r\n  text-transform: ${uppercase ? 'uppercase' : 'none'};\r\n  text-decoration: none;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  border-radius: 4px;\r\n  border-color: ${\r\n    disabled\r\n      ? color.btnDisabled\r\n      : alert\r\n      ? color.btnAlert\r\n      : primary || outline\r\n      ? color.btnPrimary\r\n      : color.borderPrimary\r\n  };\r\n  background-color: ${\r\n    disabled\r\n      ? 'transparent'\r\n      : outline\r\n      ? 'transparent'\r\n      : alert\r\n      ? color.btnAlert\r\n      : primary || loading\r\n      ? color.btnPrimary\r\n      : 'white'\r\n  };\r\n  color: ${ButtonTextColor};\r\n  transition-property: color, background-color, box-shadow, border-color;\r\n  transition-duration: 0.2s;\r\n  transition-timing-function: ease-in-out;\r\n  \r\n  &:focus-visible {\r\n    outline: 2px solid transparent;\r\n    outline-offset: 1px;\r\n    transition: outline-color 0.2s linear;\r\n    outline-color: ${color.accentColor};\r\n  }\r\n\r\n  &:hover {\r\n    color: \"auto\";\r\n    background-color: ${\r\n      disabled || outline\r\n        ? 'transparent'\r\n        : alert\r\n        ? color.btnAlertHovered\r\n        : primary || loading\r\n        ? color.btnPrimaryHovered\r\n        : '#F8F8F8'\r\n    };\r\n    border-color: ${\r\n      disabled\r\n        ? color.btnDisabled\r\n        : alert\r\n        ? color.btnAlertHovered\r\n        : primary || outline || loading\r\n        ? color.btnPrimaryHovered\r\n        : 'auto'\r\n    };\r\n    cursor: ${disabled ? 'auto' : 'pointer'};\r\n    box-shadow: ${\r\n      (primary || alert || loading) && !outline\r\n        ? `0px 3px 1px -2px rgb(0 0 0 / 20%),\r\n    0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)`\r\n        : 'none'\r\n    };\r\n    white-space: nowrap;\r\n  }\r\n  .Anique-Icon {\r\n    margin: auto;\r\n  }\r\n  & > .Anique-Icon.Anique-ButtonDisclosure {\r\n    margin-left: 0.75rem;\r\n    margin-right: 0;\r\n    padding-right: 0;\r\n    padding-left: 0;\r\n  }\r\n  &.Anique-ConnectedDisclosure {\r\n    min-width: auto;\r\n    margin-left: 0.125rem;\r\n    padding-left: 0.625rem;\r\n    padding-right: 0.625rem;\r\n  }\r\n  .Anique-ButtonIcon {\r\n    display: inline-flex;\r\n    justify-content: ${\r\n      textAlign === 'left'\r\n        ? 'flex-start'\r\n        : textAlign === 'right'\r\n        ? 'flex-end'\r\n        : 'center'\r\n    };\r\n    align-items: center;\r\n    gap: 0.5em;\r\n  }\r\n`;\r\n  }\r\n);\r\n","import React, { ReactElement, ReactNode } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nexport interface InvisibleProps {\r\n  /** The content to be hidden visually */\r\n  children?: ReactNode;\r\n}\r\n\r\nconst StyledInvisible = styled.span`\r\n  visibility: hidden !important;\r\n  position: absolute !important;\r\n  top: 0 !important;\r\n  width: 1px !important;\r\n  height: 1px !important;\r\n  margin: 0 !important;\r\n  padding: 0 !important;\r\n  overflow: hidden !important;\r\n  border: 0 !important;\r\n  outline: 0 !important;\r\n  white-space: nowrap !important;\r\n  clip-path: inset(50%) !important;\r\n`;\r\n\r\nexport const Invisible = ({ children }: InvisibleProps): ReactElement => {\r\n  return (\r\n    <StyledInvisible className=\"Anique-Invisible\">{children}</StyledInvisible>\r\n  );\r\n};\r\n","import React, { FC, ReactElement } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { useTestId } from '../../utilities';\r\n\r\ntype Size = 'small' | 'large';\r\n\r\nexport interface SpinnerProps {\r\n  /**\r\n   * Size of spinner\r\n   * @default 'large'\r\n   */\r\n  size?: Size;\r\n  /** Fill color of the spinner */\r\n  color?: string;\r\n  /** Accessible label for the spinner */\r\n  accessibilityLabel?: string;\r\n  /** Allows the component to apply the correct accessibility roles based on focus */\r\n  hasFocusableParent?: boolean;\r\n}\r\n\r\nconst AniqueStyledSpinner = styled.svg`\r\n  animation: spin 1s linear infinite;\r\n  @keyframes spin {\r\n    from {\r\n      transform: rotate(0deg);\r\n    }\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Spinner: FC<SpinnerProps> = ({\r\n  size = 'large',\r\n  color = 'currentColor'\r\n}): ReactElement => {\r\n  const testid = useTestId('spinner');\r\n  const spinnerSVGMarkup = (\r\n    <AniqueStyledSpinner\r\n      viewBox=\"0 0 20 20\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      data-icon=\"spinner\"\r\n      {...testid}\r\n      width={size === 'small' ? '16' : '32'}\r\n      height={size === 'small' ? '16' : '32'}\r\n      fill={color}\r\n    >\r\n      <path d=\"M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z\" />\r\n    </AniqueStyledSpinner>\r\n  );\r\n\r\n  return <span className=\"Anique-Spinner\">{spinnerSVGMarkup}</span>;\r\n};\r\n"],"names":[],"sourceRoot":""}